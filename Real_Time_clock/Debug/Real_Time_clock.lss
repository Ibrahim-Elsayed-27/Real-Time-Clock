
Real_Time_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ed6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000ed6  00000f6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000a6  008000a6  00000fb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fe0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002310  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d53  00000000  00000000  00003594  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015d9  00000000  00000000  000042e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d4  00000000  00000000  000058c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000825  00000000  00000000  00005d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001887  00000000  00000000  000065b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00007e40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3b       	cpi	r26, 0xB4	; 180
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 30 04 	call	0x860	; 0x860 <main>
  8a:	0c 94 69 07 	jmp	0xed2	; 0xed2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sev_seg_dec_init>:

}


void sev_seg_dec_init(uint8 port, uint8 nibble){
	port_nibble_init(port,nibble,OUTPUT);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <port_nibble_init>
  98:	08 95       	ret

0000009a <sev_seg_dec_update>:
}

void sev_seg_dec_update(uint8 port, uint8 nibble, uint8 number){
	port_nibble_write(port,nibble,number);
  9a:	0e 94 48 06 	call	0xc90	; 0xc90 <port_nibble_write>
  9e:	08 95       	ret

000000a0 <decoder_3t8_init>:
 *  Author: himah
 */ 
#include "Decoder_3t8.h"

void decoder_3t8_init(){
	pin_init(DECODER_3T8_PORT,DECODER_3T8_PIN0,OUTPUT);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
	pin_init(DECODER_3T8_PORT,DECODER_3T8_PIN1,OUTPUT);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	65 e0       	ldi	r22, 0x05	; 5
  ae:	81 e4       	ldi	r24, 0x41	; 65
  b0:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
	pin_init(DECODER_3T8_PORT,DECODER_3T8_PIN2,OUTPUT);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	66 e0       	ldi	r22, 0x06	; 6
  b8:	81 e4       	ldi	r24, 0x41	; 65
  ba:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
  be:	08 95       	ret

000000c0 <decoder_3t8_write>:
}
void decoder_3t8_write(uint8 data){
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
	pin_write(DECODER_3T8_PORT,DECODER_3T8_PIN0, GET_BIT(data,0) );
  c4:	48 2f       	mov	r20, r24
  c6:	41 70       	andi	r20, 0x01	; 1
  c8:	64 e0       	ldi	r22, 0x04	; 4
  ca:	81 e4       	ldi	r24, 0x41	; 65
  cc:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
	pin_write(DECODER_3T8_PORT,DECODER_3T8_PIN1, GET_BIT(data,1) );
  d0:	4c 2f       	mov	r20, r28
  d2:	42 70       	andi	r20, 0x02	; 2
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	55 95       	asr	r21
  d8:	47 95       	ror	r20
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	81 e4       	ldi	r24, 0x41	; 65
  de:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
	pin_write(DECODER_3T8_PORT,DECODER_3T8_PIN2, GET_BIT(data,2) );
  e2:	c4 70       	andi	r28, 0x04	; 4
  e4:	4c 2f       	mov	r20, r28
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	55 95       	asr	r21
  ea:	47 95       	ror	r20
  ec:	55 95       	asr	r21
  ee:	47 95       	ror	r20
  f0:	66 e0       	ldi	r22, 0x06	; 6
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <keypad_init>:
 */ 

#include "keypad.h"

void keypad_init(){
		pin_init(keypad_port,0,OUTPUT);
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	83 e4       	ldi	r24, 0x43	; 67
 102:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
		pin_init(keypad_port,1,OUTPUT);
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	83 e4       	ldi	r24, 0x43	; 67
 10c:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
		pin_init(keypad_port,2,OUTPUT);
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	83 e4       	ldi	r24, 0x43	; 67
 116:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
		pin_init(keypad_port,3,OUTPUT);
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	63 e0       	ldi	r22, 0x03	; 3
 11e:	83 e4       	ldi	r24, 0x43	; 67
 120:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
		
		pin_init(keypad_port,4,INPUT);
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	64 e0       	ldi	r22, 0x04	; 4
 128:	83 e4       	ldi	r24, 0x43	; 67
 12a:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
		pin_init(keypad_port,5,INPUT);
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	65 e0       	ldi	r22, 0x05	; 5
 132:	83 e4       	ldi	r24, 0x43	; 67
 134:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
		pin_init(keypad_port,6,INPUT);
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	66 e0       	ldi	r22, 0x06	; 6
 13c:	83 e4       	ldi	r24, 0x43	; 67
 13e:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
		pin_init(keypad_port,7,INPUT);
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	67 e0       	ldi	r22, 0x07	; 7
 146:	83 e4       	ldi	r24, 0x43	; 67
 148:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
		
		
		internal_pullup_enable(keypad_port,4);
 14c:	64 e0       	ldi	r22, 0x04	; 4
 14e:	83 e4       	ldi	r24, 0x43	; 67
 150:	0e 94 9b 06 	call	0xd36	; 0xd36 <internal_pullup_enable>
		internal_pullup_enable(keypad_port,5);
 154:	65 e0       	ldi	r22, 0x05	; 5
 156:	83 e4       	ldi	r24, 0x43	; 67
 158:	0e 94 9b 06 	call	0xd36	; 0xd36 <internal_pullup_enable>
		internal_pullup_enable(keypad_port,6);
 15c:	66 e0       	ldi	r22, 0x06	; 6
 15e:	83 e4       	ldi	r24, 0x43	; 67
 160:	0e 94 9b 06 	call	0xd36	; 0xd36 <internal_pullup_enable>
		internal_pullup_enable(keypad_port,7);
 164:	67 e0       	ldi	r22, 0x07	; 7
 166:	83 e4       	ldi	r24, 0x43	; 67
 168:	0e 94 9b 06 	call	0xd36	; 0xd36 <internal_pullup_enable>
 16c:	08 95       	ret

0000016e <keypad_read>:
}

uint8 keypad_read(){
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	60 97       	sbiw	r28, 0x10	; 16
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
	uint8 characters[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	e0 e6       	ldi	r30, 0x60	; 96
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	de 01       	movw	r26, r28
 196:	11 96       	adiw	r26, 0x01	; 1
 198:	01 90       	ld	r0, Z+
 19a:	0d 92       	st	X+, r0
 19c:	8a 95       	dec	r24
 19e:	e1 f7       	brne	.-8      	; 0x198 <keypad_read+0x2a>
	uint8 return_value=0xff;
	uint8 check=1;
	for (int i=0;i<4;i++){
 1a0:	c1 2c       	mov	r12, r1
 1a2:	d1 2c       	mov	r13, r1
}

uint8 keypad_read(){
	uint8 characters[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8 return_value=0xff;
	uint8 check=1;
 1a4:	ff 24       	eor	r15, r15
 1a6:	f3 94       	inc	r15
		internal_pullup_enable(keypad_port,7);
}

uint8 keypad_read(){
	uint8 characters[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8 return_value=0xff;
 1a8:	ee 24       	eor	r14, r14
 1aa:	ea 94       	dec	r14
	uint8 check=1;
	for (int i=0;i<4;i++){
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <keypad_read+0xbc>
		pin_write(keypad_port,0,HIGH);
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	83 e4       	ldi	r24, 0x43	; 67
 1b4:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
		pin_write(keypad_port,1,HIGH);
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	83 e4       	ldi	r24, 0x43	; 67
 1be:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
		pin_write(keypad_port,2,HIGH);
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	62 e0       	ldi	r22, 0x02	; 2
 1c6:	83 e4       	ldi	r24, 0x43	; 67
 1c8:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
		pin_write(keypad_port,3,HIGH);
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	63 e0       	ldi	r22, 0x03	; 3
 1d0:	83 e4       	ldi	r24, 0x43	; 67
 1d2:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
		pin_write(keypad_port,i,LOW);
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	6c 2d       	mov	r22, r12
 1da:	83 e4       	ldi	r24, 0x43	; 67
 1dc:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
		for (int j=0;j<4;j++){
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	1a c0       	rjmp	.+52     	; 0x21a <keypad_read+0xac>
			check = pin_read(keypad_port,j+4);
 1e6:	64 e0       	ldi	r22, 0x04	; 4
 1e8:	60 0f       	add	r22, r16
 1ea:	83 e4       	ldi	r24, 0x43	; 67
 1ec:	0e 94 87 05 	call	0xb0e	; 0xb0e <pin_read>
 1f0:	f8 2e       	mov	r15, r24
			if (check == 0){
 1f2:	81 11       	cpse	r24, r1
 1f4:	10 c0       	rjmp	.+32     	; 0x216 <keypad_read+0xa8>
				return_value = characters[i][j];
 1f6:	c6 01       	movw	r24, r12
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	2c 0f       	add	r18, r28
 206:	3d 1f       	adc	r19, r29
 208:	82 0f       	add	r24, r18
 20a:	93 1f       	adc	r25, r19
 20c:	fc 01       	movw	r30, r24
 20e:	e0 0f       	add	r30, r16
 210:	f1 1f       	adc	r31, r17
 212:	e0 80       	ld	r14, Z
				break;
 214:	05 c0       	rjmp	.+10     	; 0x220 <keypad_read+0xb2>
		pin_write(keypad_port,0,HIGH);
		pin_write(keypad_port,1,HIGH);
		pin_write(keypad_port,2,HIGH);
		pin_write(keypad_port,3,HIGH);
		pin_write(keypad_port,i,LOW);
		for (int j=0;j<4;j++){
 216:	0f 5f       	subi	r16, 0xFF	; 255
 218:	1f 4f       	sbci	r17, 0xFF	; 255
 21a:	04 30       	cpi	r16, 0x04	; 4
 21c:	11 05       	cpc	r17, r1
 21e:	1c f3       	brlt	.-58     	; 0x1e6 <keypad_read+0x78>
				return_value = characters[i][j];
				break;
			}

			}
			if (check ==0){
 220:	ff 20       	and	r15, r15
 222:	41 f0       	breq	.+16     	; 0x234 <keypad_read+0xc6>

uint8 keypad_read(){
	uint8 characters[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8 return_value=0xff;
	uint8 check=1;
	for (int i=0;i<4;i++){
 224:	3f ef       	ldi	r19, 0xFF	; 255
 226:	c3 1a       	sub	r12, r19
 228:	d3 0a       	sbc	r13, r19
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	c8 16       	cp	r12, r24
 22e:	d1 04       	cpc	r13, r1
 230:	0c f4       	brge	.+2      	; 0x234 <keypad_read+0xc6>
 232:	bd cf       	rjmp	.-134    	; 0x1ae <keypad_read+0x40>
		}
		
		
		return return_value;
			
 234:	8e 2d       	mov	r24, r14
 236:	60 96       	adiw	r28, 0x10	; 16
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	cd bf       	out	0x3d, r28	; 61
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	cf 90       	pop	r12
 252:	08 95       	ret

00000254 <send_falling_edge>:

}


static void send_falling_edge(){
	pin_write(CONTROL_PORT,ENABLE_PIN,HIGH);
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	82 e4       	ldi	r24, 0x42	; 66
 25a:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	8f e9       	ldi	r24, 0x9F	; 159
 260:	9f e0       	ldi	r25, 0x0F	; 15
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <send_falling_edge+0xe>
 266:	00 c0       	rjmp	.+0      	; 0x268 <send_falling_edge+0x14>
 268:	00 00       	nop
	_delay_ms(2);
	pin_write(CONTROL_PORT,ENABLE_PIN,LOW);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	82 e4       	ldi	r24, 0x42	; 66
 270:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
 274:	8f e9       	ldi	r24, 0x9F	; 159
 276:	9f e0       	ldi	r25, 0x0F	; 15
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <send_falling_edge+0x24>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <send_falling_edge+0x2a>
 27e:	00 00       	nop
 280:	08 95       	ret

00000282 <lcd_send_cmd>:
	_delay_ms(2);
}

void lcd_send_cmd(char cmd){
 282:	cf 93       	push	r28
 284:	c8 2f       	mov	r28, r24
	port_write(DATA_PORT,cmd);
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,LOW);
	send_falling_edge();
	
	#elif defined FOUR_BIT_MODE
	port_nibble_write(DATA_PORT,DATA_NIBBLE,cmd>>4);
 286:	48 2f       	mov	r20, r24
 288:	42 95       	swap	r20
 28a:	4f 70       	andi	r20, 0x0F	; 15
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	82 e4       	ldi	r24, 0x42	; 66
 290:	0e 94 48 06 	call	0xc90	; 0xc90 <port_nibble_write>
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,LOW);
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	62 e0       	ldi	r22, 0x02	; 2
 298:	82 e4       	ldi	r24, 0x42	; 66
 29a:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
	send_falling_edge();
 29e:	0e 94 2a 01 	call	0x254	; 0x254 <send_falling_edge>
	port_nibble_write(DATA_PORT,DATA_NIBBLE,cmd);
 2a2:	4c 2f       	mov	r20, r28
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	82 e4       	ldi	r24, 0x42	; 66
 2a8:	0e 94 48 06 	call	0xc90	; 0xc90 <port_nibble_write>
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,LOW);
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	82 e4       	ldi	r24, 0x42	; 66
 2b2:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
	send_falling_edge();
 2b6:	0e 94 2a 01 	call	0x254	; 0x254 <send_falling_edge>
 2ba:	8f ec       	ldi	r24, 0xCF	; 207
 2bc:	97 e0       	ldi	r25, 0x07	; 7
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <lcd_send_cmd+0x3c>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <lcd_send_cmd+0x42>
 2c4:	00 00       	nop
	_delay_ms(1);
	#endif
}
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <lcd_init>:
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	81 ee       	ldi	r24, 0xE1	; 225
 2ce:	94 e0       	ldi	r25, 0x04	; 4
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <lcd_init+0x6>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <lcd_init+0x10>
 2da:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd(ENTRY_MODE_CMD);
	_delay_ms(1);
	
	#elif defined FOUR_BIT_MODE
	port_nibble_init(DATA_PORT,DATA_NIBBLE,OUTPUT);
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	82 e4       	ldi	r24, 0x42	; 66
 2e2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <port_nibble_init>
	pin_init(CONTROL_PORT,ENABLE_PIN,OUTPUT);
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	82 e4       	ldi	r24, 0x42	; 66
 2ec:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
	pin_init(CONTROL_PORT,READ_WRITE_PIN,OUTPUT);
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	82 e4       	ldi	r24, 0x42	; 66
 2f6:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
	pin_init(CONTROL_PORT,REGISTER_SELECT_PIN,OUTPUT);
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	82 e4       	ldi	r24, 0x42	; 66
 300:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
	
	pin_write(CONTROL_PORT,READ_WRITE_PIN,LOW);
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	82 e4       	ldi	r24, 0x42	; 66
 30a:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
	
	lcd_send_cmd(RETURN_HOME_CMD);
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 41 01 	call	0x282	; 0x282 <lcd_send_cmd>
 314:	8f e1       	ldi	r24, 0x1F	; 31
 316:	9e e4       	ldi	r25, 0x4E	; 78
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <lcd_init+0x4e>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <lcd_init+0x54>
 31e:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd(FOUR_BIT_CMD);
 320:	88 e2       	ldi	r24, 0x28	; 40
 322:	0e 94 41 01 	call	0x282	; 0x282 <lcd_send_cmd>
 326:	8f ec       	ldi	r24, 0xCF	; 207
 328:	97 e0       	ldi	r25, 0x07	; 7
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <lcd_init+0x60>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <lcd_init+0x66>
 330:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(CURSOR_ON_DISPLAY_ON_CMD);
 332:	8e e0       	ldi	r24, 0x0E	; 14
 334:	0e 94 41 01 	call	0x282	; 0x282 <lcd_send_cmd>
 338:	8f ec       	ldi	r24, 0xCF	; 207
 33a:	97 e0       	ldi	r25, 0x07	; 7
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <lcd_init+0x72>
 340:	00 c0       	rjmp	.+0      	; 0x342 <lcd_init+0x78>
 342:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(CLEAR_SCREEN_CMD);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 41 01 	call	0x282	; 0x282 <lcd_send_cmd>
 34a:	8f e1       	ldi	r24, 0x1F	; 31
 34c:	9e e4       	ldi	r25, 0x4E	; 78
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <lcd_init+0x84>
 352:	00 c0       	rjmp	.+0      	; 0x354 <lcd_init+0x8a>
 354:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd(ENTRY_MODE_CMD);
 356:	86 e0       	ldi	r24, 0x06	; 6
 358:	0e 94 41 01 	call	0x282	; 0x282 <lcd_send_cmd>
 35c:	8f ec       	ldi	r24, 0xCF	; 207
 35e:	97 e0       	ldi	r25, 0x07	; 7
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <lcd_init+0x96>
 364:	00 c0       	rjmp	.+0      	; 0x366 <lcd_init+0x9c>
 366:	00 00       	nop
 368:	08 95       	ret

0000036a <lcd_send_char>:
	_delay_ms(1);
	#endif
}


void lcd_send_char(char data){
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
	port_write(DATA_PORT,data);
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,HIGH);
	send_falling_edge();
	
	#elif defined FOUR_BIT_MODE
	port_nibble_write(DATA_PORT,DATA_NIBBLE,data>>4);
 36e:	48 2f       	mov	r20, r24
 370:	42 95       	swap	r20
 372:	4f 70       	andi	r20, 0x0F	; 15
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	82 e4       	ldi	r24, 0x42	; 66
 378:	0e 94 48 06 	call	0xc90	; 0xc90 <port_nibble_write>
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,HIGH);
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	62 e0       	ldi	r22, 0x02	; 2
 380:	82 e4       	ldi	r24, 0x42	; 66
 382:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
	send_falling_edge();
 386:	0e 94 2a 01 	call	0x254	; 0x254 <send_falling_edge>
	port_nibble_write(DATA_PORT,DATA_NIBBLE,data);
 38a:	4c 2f       	mov	r20, r28
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	82 e4       	ldi	r24, 0x42	; 66
 390:	0e 94 48 06 	call	0xc90	; 0xc90 <port_nibble_write>
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,HIGH);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	62 e0       	ldi	r22, 0x02	; 2
 398:	82 e4       	ldi	r24, 0x42	; 66
 39a:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
	send_falling_edge();
 39e:	0e 94 2a 01 	call	0x254	; 0x254 <send_falling_edge>
 3a2:	8f ec       	ldi	r24, 0xCF	; 207
 3a4:	97 e0       	ldi	r25, 0x07	; 7
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lcd_send_char+0x3c>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <lcd_send_char+0x42>
 3ac:	00 00       	nop
	_delay_ms(1);
	#endif
	
	
}
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <lcd_send_string>:

void lcd_send_string(char* data){
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	ec 01       	movw	r28, r24
	while(*data != '\0'){
 3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <lcd_send_string+0xe>
		lcd_send_char(*data);
 3ba:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_send_char>
		data++;
 3be:	21 96       	adiw	r28, 0x01	; 1
	
	
}

void lcd_send_string(char* data){
	while(*data != '\0'){
 3c0:	88 81       	ld	r24, Y
 3c2:	81 11       	cpse	r24, r1
 3c4:	fa cf       	rjmp	.-12     	; 0x3ba <lcd_send_string+0x8>
		lcd_send_char(*data);
		data++;
	}
}
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <lcd_clear_screen>:

void lcd_clear_screen(){
	lcd_send_cmd(CLEAR_SCREEN_CMD);
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 41 01 	call	0x282	; 0x282 <lcd_send_cmd>
 3d2:	8f e1       	ldi	r24, 0x1F	; 31
 3d4:	9e e4       	ldi	r25, 0x4E	; 78
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_clear_screen+0xa>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <lcd_clear_screen+0x10>
 3dc:	00 00       	nop
 3de:	08 95       	ret

000003e0 <lcd_move_cursor>:
	_delay_ms(10);
}

void lcd_move_cursor(char row, char column){
	char data;
	if(row<1 || row>2 || column<1 || column>16){
 3e0:	9f ef       	ldi	r25, 0xFF	; 255
 3e2:	98 0f       	add	r25, r24
 3e4:	92 30       	cpi	r25, 0x02	; 2
 3e6:	78 f4       	brcc	.+30     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3e8:	66 23       	and	r22, r22
 3ea:	69 f0       	breq	.+26     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3ec:	61 31       	cpi	r22, 0x11	; 17
 3ee:	58 f4       	brcc	.+22     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		;
	}else if(row == 1){
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	29 f4       	brne	.+10     	; 0x3fe <lcd_move_cursor+0x1e>
		data = 0x80 + column - 1;
		lcd_send_cmd(data);
 3f4:	8f e7       	ldi	r24, 0x7F	; 127
 3f6:	86 0f       	add	r24, r22
 3f8:	0e 94 41 01 	call	0x282	; 0x282 <lcd_send_cmd>
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
	}else{
		data = 0xc0 + column - 1;
		lcd_send_cmd(data);
 3fe:	8f eb       	ldi	r24, 0xBF	; 191
 400:	86 0f       	add	r24, r22
 402:	0e 94 41 01 	call	0x282	; 0x282 <lcd_send_cmd>
 406:	8f ec       	ldi	r24, 0xCF	; 207
 408:	97 e0       	ldi	r25, 0x07	; 7
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
 412:	08 95       	ret

00000414 <led_init>:
 *  Author: himah
 */ 

#include "LED.h"
void led_init(uint8 port, uint8 pin){
	pin_init(port,pin,OUTPUT);
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	0e 94 a7 04 	call	0x94e	; 0x94e <pin_init>
 41a:	08 95       	ret

0000041c <led_on>:
}

void led_on(uint8 port, uint8 pin){
	pin_write(port,pin,HIGH);
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
 422:	08 95       	ret

00000424 <led_off>:
}

void led_off(uint8 port, uint8 pin){
	pin_write(port,pin,LOW);
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	0e 94 17 05 	call	0xa2e	; 0xa2e <pin_write>
 42a:	08 95       	ret

0000042c <real_time>:
	enable_counter++;
}


void real_time(){
	seconds_counter++;
 42c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <seconds_counter>
 430:	8f 5f       	subi	r24, 0xFF	; 255
 432:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <seconds_counter>
	if(seconds_counter >= 60){
 436:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <seconds_counter>
 43a:	8c 33       	cpi	r24, 0x3C	; 60
 43c:	38 f0       	brcs	.+14     	; 0x44c <real_time+0x20>
		seconds_counter = 0;
 43e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <seconds_counter>
		minutes_counter++;
 442:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <minutes_counter>
 446:	8f 5f       	subi	r24, 0xFF	; 255
 448:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <minutes_counter>
	}
	if(minutes_counter >= 60){
 44c:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <minutes_counter>
 450:	8c 33       	cpi	r24, 0x3C	; 60
 452:	38 f0       	brcs	.+14     	; 0x462 <real_time+0x36>
		minutes_counter = 0;
 454:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <minutes_counter>
		hours_counter++;
 458:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <hours_counter>
 45c:	8f 5f       	subi	r24, 0xFF	; 255
 45e:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <hours_counter>
	}
	if(hours_counter >= 24){
 462:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <hours_counter>
 466:	88 31       	cpi	r24, 0x18	; 24
 468:	10 f0       	brcs	.+4      	; 0x46e <real_time+0x42>
		hours_counter = 0;
 46a:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <hours_counter>
 46e:	08 95       	ret

00000470 <stop_watch>:
	
}


void stop_watch(){
	if(seconds_counter == 0 && minutes_counter == 0 && hours_counter == 0){
 470:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <seconds_counter>
 474:	81 11       	cpse	r24, r1
 476:	0b c0       	rjmp	.+22     	; 0x48e <stop_watch+0x1e>
 478:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <minutes_counter>
 47c:	81 11       	cpse	r24, r1
 47e:	07 c0       	rjmp	.+14     	; 0x48e <stop_watch+0x1e>
 480:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <hours_counter>
 484:	81 11       	cpse	r24, r1
 486:	03 c0       	rjmp	.+6      	; 0x48e <stop_watch+0x1e>
			stop_watch_flag = 1;
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <stop_watch_flag>
		}
	seconds_counter--;
 48e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <seconds_counter>
 492:	81 50       	subi	r24, 0x01	; 1
 494:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <seconds_counter>
	wait_seconds--;
 498:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <wait_seconds>
 49c:	81 50       	subi	r24, 0x01	; 1
 49e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <wait_seconds>
	if(seconds_counter == 255){
 4a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <seconds_counter>
 4a6:	8f 3f       	cpi	r24, 0xFF	; 255
 4a8:	41 f4       	brne	.+16     	; 0x4ba <stop_watch+0x4a>
		seconds_counter = 59;
 4aa:	8b e3       	ldi	r24, 0x3B	; 59
 4ac:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <seconds_counter>
		minutes_counter--;
 4b0:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <minutes_counter>
 4b4:	81 50       	subi	r24, 0x01	; 1
 4b6:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <minutes_counter>
	}
	if(minutes_counter == 255){
 4ba:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <minutes_counter>
 4be:	8f 3f       	cpi	r24, 0xFF	; 255
 4c0:	41 f4       	brne	.+16     	; 0x4d2 <stop_watch+0x62>
		minutes_counter = 59;
 4c2:	8b e3       	ldi	r24, 0x3B	; 59
 4c4:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <minutes_counter>
		hours_counter--;
 4c8:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <hours_counter>
 4cc:	81 50       	subi	r24, 0x01	; 1
 4ce:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <hours_counter>
	}
	if(hours_counter == 255){
 4d2:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <hours_counter>
 4d6:	8f 3f       	cpi	r24, 0xFF	; 255
 4d8:	19 f4       	brne	.+6      	; 0x4e0 <stop_watch+0x70>
		hours_counter = 23;
 4da:	87 e1       	ldi	r24, 0x17	; 23
 4dc:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <hours_counter>
 4e0:	08 95       	ret

000004e2 <alarm>:

	
}

void alarm(){
	seconds_counter++;
 4e2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <seconds_counter>
 4e6:	8f 5f       	subi	r24, 0xFF	; 255
 4e8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <seconds_counter>
	wait_seconds--;
 4ec:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <wait_seconds>
 4f0:	81 50       	subi	r24, 0x01	; 1
 4f2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <wait_seconds>
	if(seconds_counter >= 60){
 4f6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <seconds_counter>
 4fa:	8c 33       	cpi	r24, 0x3C	; 60
 4fc:	38 f0       	brcs	.+14     	; 0x50c <alarm+0x2a>
		seconds_counter = 0;
 4fe:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <seconds_counter>
		minutes_counter++;
 502:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <minutes_counter>
 506:	8f 5f       	subi	r24, 0xFF	; 255
 508:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <minutes_counter>
	}
	if(minutes_counter >= 60){
 50c:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <minutes_counter>
 510:	8c 33       	cpi	r24, 0x3C	; 60
 512:	38 f0       	brcs	.+14     	; 0x522 <alarm+0x40>
		minutes_counter = 0;
 514:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <minutes_counter>
		hours_counter++;
 518:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <hours_counter>
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <hours_counter>
	}
	if(hours_counter >= 24){
 522:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <hours_counter>
 526:	88 31       	cpi	r24, 0x18	; 24
 528:	10 f0       	brcs	.+4      	; 0x52e <alarm+0x4c>
		hours_counter = 0;
 52a:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <hours_counter>
	}	
	
	if (alarm_seconds == seconds_counter && alarm_minutes == minutes_counter && alarm_hours == hours_counter ){
 52e:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <alarm_seconds>
 532:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <seconds_counter>
 536:	98 13       	cpse	r25, r24
 538:	0f c0       	rjmp	.+30     	; 0x558 <alarm+0x76>
 53a:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <alarm_minutes>
 53e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <minutes_counter>
 542:	98 13       	cpse	r25, r24
 544:	09 c0       	rjmp	.+18     	; 0x558 <alarm+0x76>
 546:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <alarm_hours>
 54a:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <hours_counter>
 54e:	98 13       	cpse	r25, r24
 550:	03 c0       	rjmp	.+6      	; 0x558 <alarm+0x76>
		alarm_flag = 1;
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <alarm_flag>
 558:	08 95       	ret

0000055a <sev_seg_polling>:
    }
}

void sev_seg_polling(){
	static uint8 enable_counter;
	if (enable_counter == 6){
 55a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 55e:	86 30       	cpi	r24, 0x06	; 6
 560:	11 f4       	brne	.+4      	; 0x566 <sev_seg_polling+0xc>
		enable_counter = 0; 
 562:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
	}
	decoder_3t8_write(enable_counter);
 566:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 56a:	0e 94 60 00 	call	0xc0	; 0xc0 <decoder_3t8_write>
	switch (enable_counter){
 56e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 572:	82 30       	cpi	r24, 0x02	; 2
 574:	81 f1       	breq	.+96     	; 0x5d6 <sev_seg_polling+0x7c>
 576:	28 f4       	brcc	.+10     	; 0x582 <sev_seg_polling+0x28>
 578:	88 23       	and	r24, r24
 57a:	59 f0       	breq	.+22     	; 0x592 <sev_seg_polling+0x38>
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	e9 f0       	breq	.+58     	; 0x5ba <sev_seg_polling+0x60>
 580:	6d c0       	rjmp	.+218    	; 0x65c <sev_seg_polling+0x102>
 582:	84 30       	cpi	r24, 0x04	; 4
 584:	09 f4       	brne	.+2      	; 0x588 <sev_seg_polling+0x2e>
 586:	49 c0       	rjmp	.+146    	; 0x61a <sev_seg_polling+0xc0>
 588:	d0 f1       	brcs	.+116    	; 0x5fe <sev_seg_polling+0xa4>
 58a:	85 30       	cpi	r24, 0x05	; 5
 58c:	09 f4       	brne	.+2      	; 0x590 <sev_seg_polling+0x36>
 58e:	59 c0       	rjmp	.+178    	; 0x642 <sev_seg_polling+0xe8>
 590:	65 c0       	rjmp	.+202    	; 0x65c <sev_seg_polling+0x102>
		case 0:
			sev_seg_dec_update(PORT_A,LOW_NIBBLE,seconds_counter%10);
 592:	40 91 b0 00 	lds	r20, 0x00B0	; 0x8000b0 <seconds_counter>
 596:	8d ec       	ldi	r24, 0xCD	; 205
 598:	48 9f       	mul	r20, r24
 59a:	81 2d       	mov	r24, r1
 59c:	11 24       	eor	r1, r1
 59e:	86 95       	lsr	r24
 5a0:	86 95       	lsr	r24
 5a2:	86 95       	lsr	r24
 5a4:	88 0f       	add	r24, r24
 5a6:	98 2f       	mov	r25, r24
 5a8:	99 0f       	add	r25, r25
 5aa:	99 0f       	add	r25, r25
 5ac:	89 0f       	add	r24, r25
 5ae:	48 1b       	sub	r20, r24
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	81 e4       	ldi	r24, 0x41	; 65
 5b4:	0e 94 4d 00 	call	0x9a	; 0x9a <sev_seg_dec_update>
			break;
 5b8:	51 c0       	rjmp	.+162    	; 0x65c <sev_seg_polling+0x102>
		case 1:
			sev_seg_dec_update(PORT_A,LOW_NIBBLE,seconds_counter/10);
 5ba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <seconds_counter>
 5be:	4d ec       	ldi	r20, 0xCD	; 205
 5c0:	84 9f       	mul	r24, r20
 5c2:	41 2d       	mov	r20, r1
 5c4:	11 24       	eor	r1, r1
 5c6:	46 95       	lsr	r20
 5c8:	46 95       	lsr	r20
 5ca:	46 95       	lsr	r20
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	81 e4       	ldi	r24, 0x41	; 65
 5d0:	0e 94 4d 00 	call	0x9a	; 0x9a <sev_seg_dec_update>
			break;
 5d4:	43 c0       	rjmp	.+134    	; 0x65c <sev_seg_polling+0x102>
		case 2:
			sev_seg_dec_update(PORT_A,LOW_NIBBLE,minutes_counter%10);
 5d6:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <minutes_counter>
 5da:	8d ec       	ldi	r24, 0xCD	; 205
 5dc:	48 9f       	mul	r20, r24
 5de:	81 2d       	mov	r24, r1
 5e0:	11 24       	eor	r1, r1
 5e2:	86 95       	lsr	r24
 5e4:	86 95       	lsr	r24
 5e6:	86 95       	lsr	r24
 5e8:	88 0f       	add	r24, r24
 5ea:	98 2f       	mov	r25, r24
 5ec:	99 0f       	add	r25, r25
 5ee:	99 0f       	add	r25, r25
 5f0:	89 0f       	add	r24, r25
 5f2:	48 1b       	sub	r20, r24
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	81 e4       	ldi	r24, 0x41	; 65
 5f8:	0e 94 4d 00 	call	0x9a	; 0x9a <sev_seg_dec_update>
			break;
 5fc:	2f c0       	rjmp	.+94     	; 0x65c <sev_seg_polling+0x102>
		case 3:
			sev_seg_dec_update(PORT_A,LOW_NIBBLE,minutes_counter/10);
 5fe:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <minutes_counter>
 602:	4d ec       	ldi	r20, 0xCD	; 205
 604:	84 9f       	mul	r24, r20
 606:	41 2d       	mov	r20, r1
 608:	11 24       	eor	r1, r1
 60a:	46 95       	lsr	r20
 60c:	46 95       	lsr	r20
 60e:	46 95       	lsr	r20
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	81 e4       	ldi	r24, 0x41	; 65
 614:	0e 94 4d 00 	call	0x9a	; 0x9a <sev_seg_dec_update>
			break;
 618:	21 c0       	rjmp	.+66     	; 0x65c <sev_seg_polling+0x102>
		case 4:
			sev_seg_dec_update(PORT_A,LOW_NIBBLE,hours_counter%10);
 61a:	40 91 ad 00 	lds	r20, 0x00AD	; 0x8000ad <hours_counter>
 61e:	8d ec       	ldi	r24, 0xCD	; 205
 620:	48 9f       	mul	r20, r24
 622:	81 2d       	mov	r24, r1
 624:	11 24       	eor	r1, r1
 626:	86 95       	lsr	r24
 628:	86 95       	lsr	r24
 62a:	86 95       	lsr	r24
 62c:	88 0f       	add	r24, r24
 62e:	98 2f       	mov	r25, r24
 630:	99 0f       	add	r25, r25
 632:	99 0f       	add	r25, r25
 634:	89 0f       	add	r24, r25
 636:	48 1b       	sub	r20, r24
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	81 e4       	ldi	r24, 0x41	; 65
 63c:	0e 94 4d 00 	call	0x9a	; 0x9a <sev_seg_dec_update>
			break;
 640:	0d c0       	rjmp	.+26     	; 0x65c <sev_seg_polling+0x102>
		case 5:
			sev_seg_dec_update(PORT_A,LOW_NIBBLE,hours_counter/10);
 642:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <hours_counter>
 646:	4d ec       	ldi	r20, 0xCD	; 205
 648:	84 9f       	mul	r24, r20
 64a:	41 2d       	mov	r20, r1
 64c:	11 24       	eor	r1, r1
 64e:	46 95       	lsr	r20
 650:	46 95       	lsr	r20
 652:	46 95       	lsr	r20
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	81 e4       	ldi	r24, 0x41	; 65
 658:	0e 94 4d 00 	call	0x9a	; 0x9a <sev_seg_dec_update>
			break;
				
	}
	enable_counter++;
 65c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 660:	8f 5f       	subi	r24, 0xFF	; 255
 662:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
 666:	08 95       	ret

00000668 <update_clock>:
	}
	
	
}

void update_clock(uint8 source){
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	d8 2f       	mov	r29, r24
		uint8 keypad_check;
		
		/*Set Hours*/
		lcd_clear_screen();
 66e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_clear_screen>
		lcd_send_string("Hours:__");
 672:	80 e7       	ldi	r24, 0x70	; 112
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_send_string>
		lcd_move_cursor(1,7);
 67a:	67 e0       	ldi	r22, 0x07	; 7
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_move_cursor>
		do 
		{
			keypad_check = keypad_read();
 682:	0e 94 b7 00 	call	0x16e	; 0x16e <keypad_read>
 686:	c8 2f       	mov	r28, r24
 688:	2f ef       	ldi	r18, 0xFF	; 255
 68a:	81 ee       	ldi	r24, 0xE1	; 225
 68c:	94 e0       	ldi	r25, 0x04	; 4
 68e:	21 50       	subi	r18, 0x01	; 1
 690:	80 40       	sbci	r24, 0x00	; 0
 692:	90 40       	sbci	r25, 0x00	; 0
 694:	e1 f7       	brne	.-8      	; 0x68e <update_clock+0x26>
 696:	00 c0       	rjmp	.+0      	; 0x698 <update_clock+0x30>
 698:	00 00       	nop
			_delay_ms(200);
		} while (keypad_check == 0xff);
 69a:	cf 3f       	cpi	r28, 0xFF	; 255
 69c:	91 f3       	breq	.-28     	; 0x682 <update_clock+0x1a>
		lcd_send_char(keypad_check);
 69e:	8c 2f       	mov	r24, r28
 6a0:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_send_char>
		
		
		if (source == 3){
 6a4:	d3 30       	cpi	r29, 0x03	; 3
 6a6:	59 f4       	brne	.+22     	; 0x6be <update_clock+0x56>
			alarm_hours = (keypad_check-48)*10;
 6a8:	8c 2f       	mov	r24, r28
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	c0 97       	sbiw	r24, 0x30	; 48
 6ae:	88 0f       	add	r24, r24
 6b0:	98 2f       	mov	r25, r24
 6b2:	99 0f       	add	r25, r25
 6b4:	99 0f       	add	r25, r25
 6b6:	89 0f       	add	r24, r25
 6b8:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <alarm_hours>
 6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <update_clock+0x6a>
		}
		else{
			hours_counter= (keypad_check-48)*10;
 6be:	8c 2f       	mov	r24, r28
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	c0 97       	sbiw	r24, 0x30	; 48
 6c4:	88 0f       	add	r24, r24
 6c6:	98 2f       	mov	r25, r24
 6c8:	99 0f       	add	r25, r25
 6ca:	99 0f       	add	r25, r25
 6cc:	89 0f       	add	r24, r25
 6ce:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <hours_counter>
		}
		
		do 
		{
			keypad_check = keypad_read();
 6d2:	0e 94 b7 00 	call	0x16e	; 0x16e <keypad_read>
 6d6:	c8 2f       	mov	r28, r24
 6d8:	2f ef       	ldi	r18, 0xFF	; 255
 6da:	81 ee       	ldi	r24, 0xE1	; 225
 6dc:	94 e0       	ldi	r25, 0x04	; 4
 6de:	21 50       	subi	r18, 0x01	; 1
 6e0:	80 40       	sbci	r24, 0x00	; 0
 6e2:	90 40       	sbci	r25, 0x00	; 0
 6e4:	e1 f7       	brne	.-8      	; 0x6de <update_clock+0x76>
 6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <update_clock+0x80>
 6e8:	00 00       	nop
			_delay_ms(200);
		} while (keypad_check == 0xff);
 6ea:	cf 3f       	cpi	r28, 0xFF	; 255
 6ec:	91 f3       	breq	.-28     	; 0x6d2 <update_clock+0x6a>
		lcd_send_char(keypad_check);
 6ee:	8c 2f       	mov	r24, r28
 6f0:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_send_char>
		
		if (source == 3){
 6f4:	d3 30       	cpi	r29, 0x03	; 3
 6f6:	39 f4       	brne	.+14     	; 0x706 <update_clock+0x9e>
			alarm_hours += keypad_check-48;
 6f8:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <alarm_hours>
 6fc:	c8 0f       	add	r28, r24
 6fe:	c0 53       	subi	r28, 0x30	; 48
 700:	c0 93 ae 00 	sts	0x00AE, r28	; 0x8000ae <alarm_hours>
 704:	06 c0       	rjmp	.+12     	; 0x712 <update_clock+0xaa>
		}
		else{
			hours_counter += keypad_check-48;
 706:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <hours_counter>
 70a:	c8 0f       	add	r28, r24
 70c:	c0 53       	subi	r28, 0x30	; 48
 70e:	c0 93 ad 00 	sts	0x00AD, r28	; 0x8000ad <hours_counter>
		
		
		
		
		/*Set Minutes*/
		lcd_clear_screen();
 712:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_clear_screen>
		lcd_send_string("Minutes:__");
 716:	89 e7       	ldi	r24, 0x79	; 121
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_send_string>
		lcd_move_cursor(1,9);
 71e:	69 e0       	ldi	r22, 0x09	; 9
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_move_cursor>
		do
		{
			keypad_check = keypad_read();
 726:	0e 94 b7 00 	call	0x16e	; 0x16e <keypad_read>
 72a:	c8 2f       	mov	r28, r24
 72c:	2f ef       	ldi	r18, 0xFF	; 255
 72e:	81 ee       	ldi	r24, 0xE1	; 225
 730:	94 e0       	ldi	r25, 0x04	; 4
 732:	21 50       	subi	r18, 0x01	; 1
 734:	80 40       	sbci	r24, 0x00	; 0
 736:	90 40       	sbci	r25, 0x00	; 0
 738:	e1 f7       	brne	.-8      	; 0x732 <update_clock+0xca>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <update_clock+0xd4>
 73c:	00 00       	nop
			_delay_ms(200);
		} while (keypad_check == 0xff);
 73e:	cf 3f       	cpi	r28, 0xFF	; 255
 740:	91 f3       	breq	.-28     	; 0x726 <update_clock+0xbe>
		lcd_send_char(keypad_check);
 742:	8c 2f       	mov	r24, r28
 744:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_send_char>
		
		if (source == 3){
 748:	d3 30       	cpi	r29, 0x03	; 3
 74a:	59 f4       	brne	.+22     	; 0x762 <update_clock+0xfa>
			alarm_minutes = (keypad_check-48)*10;
 74c:	8c 2f       	mov	r24, r28
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	c0 97       	sbiw	r24, 0x30	; 48
 752:	88 0f       	add	r24, r24
 754:	98 2f       	mov	r25, r24
 756:	99 0f       	add	r25, r25
 758:	99 0f       	add	r25, r25
 75a:	89 0f       	add	r24, r25
 75c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <alarm_minutes>
 760:	0a c0       	rjmp	.+20     	; 0x776 <update_clock+0x10e>
		}
		else{
			minutes_counter= (keypad_check-48)*10;
 762:	8c 2f       	mov	r24, r28
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	c0 97       	sbiw	r24, 0x30	; 48
 768:	88 0f       	add	r24, r24
 76a:	98 2f       	mov	r25, r24
 76c:	99 0f       	add	r25, r25
 76e:	99 0f       	add	r25, r25
 770:	89 0f       	add	r24, r25
 772:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <minutes_counter>
		}
		
		do
		{
			keypad_check = keypad_read();
 776:	0e 94 b7 00 	call	0x16e	; 0x16e <keypad_read>
 77a:	c8 2f       	mov	r28, r24
 77c:	2f ef       	ldi	r18, 0xFF	; 255
 77e:	81 ee       	ldi	r24, 0xE1	; 225
 780:	94 e0       	ldi	r25, 0x04	; 4
 782:	21 50       	subi	r18, 0x01	; 1
 784:	80 40       	sbci	r24, 0x00	; 0
 786:	90 40       	sbci	r25, 0x00	; 0
 788:	e1 f7       	brne	.-8      	; 0x782 <update_clock+0x11a>
 78a:	00 c0       	rjmp	.+0      	; 0x78c <update_clock+0x124>
 78c:	00 00       	nop
			_delay_ms(200);
		} while (keypad_check == 0xff);
 78e:	cf 3f       	cpi	r28, 0xFF	; 255
 790:	91 f3       	breq	.-28     	; 0x776 <update_clock+0x10e>
		lcd_send_char(keypad_check);
 792:	8c 2f       	mov	r24, r28
 794:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_send_char>
		if (source == 3){
 798:	d3 30       	cpi	r29, 0x03	; 3
 79a:	39 f4       	brne	.+14     	; 0x7aa <update_clock+0x142>
			alarm_minutes += keypad_check-48;
 79c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <alarm_minutes>
 7a0:	c8 0f       	add	r28, r24
 7a2:	c0 53       	subi	r28, 0x30	; 48
 7a4:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <alarm_minutes>
 7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <update_clock+0x14e>
		}
		else{
			minutes_counter += keypad_check-48;
 7aa:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <minutes_counter>
 7ae:	c8 0f       	add	r28, r24
 7b0:	c0 53       	subi	r28, 0x30	; 48
 7b2:	c0 93 ab 00 	sts	0x00AB, r28	; 0x8000ab <minutes_counter>
		
		
		
		
		/*Set Seconds*/
		lcd_clear_screen();
 7b6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_clear_screen>
		lcd_send_string("Seconds:__");
 7ba:	84 e8       	ldi	r24, 0x84	; 132
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_send_string>
		lcd_move_cursor(1,9);
 7c2:	69 e0       	ldi	r22, 0x09	; 9
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_move_cursor>
		do
		{
			keypad_check = keypad_read();
 7ca:	0e 94 b7 00 	call	0x16e	; 0x16e <keypad_read>
 7ce:	c8 2f       	mov	r28, r24
 7d0:	2f ef       	ldi	r18, 0xFF	; 255
 7d2:	81 ee       	ldi	r24, 0xE1	; 225
 7d4:	94 e0       	ldi	r25, 0x04	; 4
 7d6:	21 50       	subi	r18, 0x01	; 1
 7d8:	80 40       	sbci	r24, 0x00	; 0
 7da:	90 40       	sbci	r25, 0x00	; 0
 7dc:	e1 f7       	brne	.-8      	; 0x7d6 <update_clock+0x16e>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <update_clock+0x178>
 7e0:	00 00       	nop
			_delay_ms(200);
		} while (keypad_check == 0xff);
 7e2:	cf 3f       	cpi	r28, 0xFF	; 255
 7e4:	91 f3       	breq	.-28     	; 0x7ca <update_clock+0x162>
		lcd_send_char(keypad_check);
 7e6:	8c 2f       	mov	r24, r28
 7e8:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_send_char>
		
		if (source == 3){
 7ec:	d3 30       	cpi	r29, 0x03	; 3
 7ee:	59 f4       	brne	.+22     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
			alarm_seconds = (keypad_check-48)*10;
 7f0:	8c 2f       	mov	r24, r28
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	c0 97       	sbiw	r24, 0x30	; 48
 7f6:	88 0f       	add	r24, r24
 7f8:	98 2f       	mov	r25, r24
 7fa:	99 0f       	add	r25, r25
 7fc:	99 0f       	add	r25, r25
 7fe:	89 0f       	add	r24, r25
 800:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <alarm_seconds>
 804:	0a c0       	rjmp	.+20     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
		}
		else{
			seconds_counter= (keypad_check-48)*10;
 806:	8c 2f       	mov	r24, r28
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	c0 97       	sbiw	r24, 0x30	; 48
 80c:	88 0f       	add	r24, r24
 80e:	98 2f       	mov	r25, r24
 810:	99 0f       	add	r25, r25
 812:	99 0f       	add	r25, r25
 814:	89 0f       	add	r24, r25
 816:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <seconds_counter>
		}
		
		do
		{
			keypad_check = keypad_read();
 81a:	0e 94 b7 00 	call	0x16e	; 0x16e <keypad_read>
 81e:	c8 2f       	mov	r28, r24
 820:	2f ef       	ldi	r18, 0xFF	; 255
 822:	81 ee       	ldi	r24, 0xE1	; 225
 824:	94 e0       	ldi	r25, 0x04	; 4
 826:	21 50       	subi	r18, 0x01	; 1
 828:	80 40       	sbci	r24, 0x00	; 0
 82a:	90 40       	sbci	r25, 0x00	; 0
 82c:	e1 f7       	brne	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	00 c0       	rjmp	.+0      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 830:	00 00       	nop
			_delay_ms(200);
		} while (keypad_check == 0xff);
 832:	cf 3f       	cpi	r28, 0xFF	; 255
 834:	91 f3       	breq	.-28     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
		lcd_send_char(keypad_check);
 836:	8c 2f       	mov	r24, r28
 838:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_send_char>
		
		if (source == 3){
 83c:	d3 30       	cpi	r29, 0x03	; 3
 83e:	39 f4       	brne	.+14     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			alarm_seconds += keypad_check-48;
 840:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <alarm_seconds>
 844:	c8 0f       	add	r28, r24
 846:	c0 53       	subi	r28, 0x30	; 48
 848:	c0 93 b2 00 	sts	0x00B2, r28	; 0x8000b2 <alarm_seconds>
 84c:	06 c0       	rjmp	.+12     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		}
		else{
			seconds_counter += keypad_check-48;
 84e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <seconds_counter>
 852:	c8 0f       	add	r28, r24
 854:	c0 53       	subi	r28, 0x30	; 48
 856:	c0 93 b0 00 	sts	0x00B0, r28	; 0x8000b0 <seconds_counter>
		}
		
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <main>:
volatile uint8 alarm_minutes;
volatile uint8 alarm_hours;
volatile uint8 wait_seconds;
int main(void)
{
    timer0_init();
 860:	0e 94 d2 06 	call	0xda4	; 0xda4 <timer0_init>
	timer0_enable();
 864:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <timer0_enable>
	timer0_set_callback(sev_seg_polling);
 868:	8d ea       	ldi	r24, 0xAD	; 173
 86a:	92 e0       	ldi	r25, 0x02	; 2
 86c:	0e 94 f1 06 	call	0xde2	; 0xde2 <timer0_set_callback>
	
	timer2_init();
 870:	0e 94 1d 07 	call	0xe3a	; 0xe3a <timer2_init>
	timer2_enable();
 874:	0e 94 36 07 	call	0xe6c	; 0xe6c <timer2_enable>
	timer2_set_callback(real_time);
 878:	86 e1       	ldi	r24, 0x16	; 22
 87a:	92 e0       	ldi	r25, 0x02	; 2
 87c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <timer2_set_callback>
	
	
	sev_seg_dec_init(PORT_A,LOW_NIBBLE);
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	81 e4       	ldi	r24, 0x41	; 65
 884:	0e 94 49 00 	call	0x92	; 0x92 <sev_seg_dec_init>
	decoder_3t8_init();
 888:	0e 94 50 00 	call	0xa0	; 0xa0 <decoder_3t8_init>
	keypad_init();
 88c:	0e 94 7e 00 	call	0xfc	; 0xfc <keypad_init>
	lcd_init();
 890:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_init>
	
	led_init(PORT_D,PIN0);
 894:	60 e0       	ldi	r22, 0x00	; 0
 896:	84 e4       	ldi	r24, 0x44	; 68
 898:	0e 94 0a 02 	call	0x414	; 0x414 <led_init>
	uint8 keypad_check;
    while (1) 
    {
		lcd_clear_screen();
 89c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_clear_screen>
		lcd_send_string("1-Clock 2-Stop");
 8a0:	8f e8       	ldi	r24, 0x8F	; 143
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_send_string>
		lcd_move_cursor(2,1);
 8a8:	61 e0       	ldi	r22, 0x01	; 1
 8aa:	82 e0       	ldi	r24, 0x02	; 2
 8ac:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_move_cursor>
		lcd_send_string("3-Alarm");
 8b0:	8e e9       	ldi	r24, 0x9E	; 158
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_send_string>
		do 
		{
			keypad_check = keypad_read();
 8b8:	0e 94 b7 00 	call	0x16e	; 0x16e <keypad_read>
 8bc:	c8 2f       	mov	r28, r24
 8be:	2f ef       	ldi	r18, 0xFF	; 255
 8c0:	81 ee       	ldi	r24, 0xE1	; 225
 8c2:	94 e0       	ldi	r25, 0x04	; 4
 8c4:	21 50       	subi	r18, 0x01	; 1
 8c6:	80 40       	sbci	r24, 0x00	; 0
 8c8:	90 40       	sbci	r25, 0x00	; 0
 8ca:	e1 f7       	brne	.-8      	; 0x8c4 <main+0x64>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <main+0x6e>
 8ce:	00 00       	nop
			_delay_ms(200);
			if(stop_watch_flag == 1 || alarm_flag == 1){
 8d0:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <stop_watch_flag>
 8d4:	81 30       	cpi	r24, 0x01	; 1
 8d6:	21 f0       	breq	.+8      	; 0x8e0 <main+0x80>
 8d8:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <alarm_flag>
 8dc:	81 30       	cpi	r24, 0x01	; 1
 8de:	a1 f4       	brne	.+40     	; 0x908 <main+0xa8>
				stop_watch_flag = 0;
 8e0:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <stop_watch_flag>
				alarm_flag = 0;
 8e4:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <alarm_flag>
				wait_seconds = 10;
 8e8:	8a e0       	ldi	r24, 0x0A	; 10
 8ea:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <wait_seconds>
				while(wait_seconds != 0){
 8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <main+0x98>
					led_on(PORT_D,PIN0);
 8f0:	60 e0       	ldi	r22, 0x00	; 0
 8f2:	84 e4       	ldi	r24, 0x44	; 68
 8f4:	0e 94 0e 02 	call	0x41c	; 0x41c <led_on>
			_delay_ms(200);
			if(stop_watch_flag == 1 || alarm_flag == 1){
				stop_watch_flag = 0;
				alarm_flag = 0;
				wait_seconds = 10;
				while(wait_seconds != 0){
 8f8:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <wait_seconds>
 8fc:	81 11       	cpse	r24, r1
 8fe:	f8 cf       	rjmp	.-16     	; 0x8f0 <main+0x90>
					led_on(PORT_D,PIN0);
				}
			led_off(PORT_D,PIN0);
 900:	60 e0       	ldi	r22, 0x00	; 0
 902:	84 e4       	ldi	r24, 0x44	; 68
 904:	0e 94 12 02 	call	0x424	; 0x424 <led_off>
			}
		} while (keypad_check != '1' && keypad_check != '2' && keypad_check != '3');
 908:	8f ec       	ldi	r24, 0xCF	; 207
 90a:	8c 0f       	add	r24, r28
 90c:	83 30       	cpi	r24, 0x03	; 3
 90e:	a0 f6       	brcc	.-88     	; 0x8b8 <main+0x58>
		
		
		
		if(keypad_check == '1'){
 910:	c1 33       	cpi	r28, 0x31	; 49
 912:	41 f4       	brne	.+16     	; 0x924 <main+0xc4>
			update_clock(1);
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	0e 94 34 03 	call	0x668	; 0x668 <update_clock>
			timer2_set_callback(real_time);
 91a:	86 e1       	ldi	r24, 0x16	; 22
 91c:	92 e0       	ldi	r25, 0x02	; 2
 91e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <timer2_set_callback>
 922:	bc cf       	rjmp	.-136    	; 0x89c <main+0x3c>
			
		}
		else if(keypad_check == '2'){
 924:	c2 33       	cpi	r28, 0x32	; 50
 926:	41 f4       	brne	.+16     	; 0x938 <main+0xd8>
			update_clock(2);
 928:	82 e0       	ldi	r24, 0x02	; 2
 92a:	0e 94 34 03 	call	0x668	; 0x668 <update_clock>
			timer2_set_callback(stop_watch);
 92e:	88 e3       	ldi	r24, 0x38	; 56
 930:	92 e0       	ldi	r25, 0x02	; 2
 932:	0e 94 3d 07 	call	0xe7a	; 0xe7a <timer2_set_callback>
 936:	b2 cf       	rjmp	.-156    	; 0x89c <main+0x3c>
			
		}
		else if(keypad_check == '3'){
 938:	c3 33       	cpi	r28, 0x33	; 51
 93a:	09 f0       	breq	.+2      	; 0x93e <main+0xde>
 93c:	af cf       	rjmp	.-162    	; 0x89c <main+0x3c>
			update_clock(3);
 93e:	83 e0       	ldi	r24, 0x03	; 3
 940:	0e 94 34 03 	call	0x668	; 0x668 <update_clock>
			timer2_set_callback(alarm);
 944:	81 e7       	ldi	r24, 0x71	; 113
 946:	92 e0       	ldi	r25, 0x02	; 2
 948:	0e 94 3d 07 	call	0xe7a	; 0xe7a <timer2_set_callback>
 94c:	a7 cf       	rjmp	.-178    	; 0x89c <main+0x3c>

0000094e <pin_init>:
		case PORT_D:
		if (nibble==LOW_NIBBLE){
			PORTD_REG &= 0xf0;
		}
		else{
			PORTD_REG &= 0x0f;
 94e:	82 34       	cpi	r24, 0x42	; 66
 950:	19 f1       	breq	.+70     	; 0x998 <pin_init+0x4a>
 952:	18 f4       	brcc	.+6      	; 0x95a <pin_init+0xc>
 954:	81 34       	cpi	r24, 0x41	; 65
 956:	39 f0       	breq	.+14     	; 0x966 <pin_init+0x18>
 958:	08 95       	ret
 95a:	83 34       	cpi	r24, 0x43	; 67
 95c:	b1 f1       	breq	.+108    	; 0x9ca <pin_init+0x7c>
 95e:	84 34       	cpi	r24, 0x44	; 68
 960:	09 f4       	brne	.+2      	; 0x964 <pin_init+0x16>
 962:	4c c0       	rjmp	.+152    	; 0x9fc <pin_init+0xae>
 964:	08 95       	ret
 966:	41 11       	cpse	r20, r1
 968:	0b c0       	rjmp	.+22     	; 0x980 <pin_init+0x32>
 96a:	2a b3       	in	r18, 0x1a	; 26
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	02 c0       	rjmp	.+4      	; 0x976 <pin_init+0x28>
 972:	88 0f       	add	r24, r24
 974:	99 1f       	adc	r25, r25
 976:	6a 95       	dec	r22
 978:	e2 f7       	brpl	.-8      	; 0x972 <pin_init+0x24>
 97a:	82 2b       	or	r24, r18
 97c:	8a bb       	out	0x1a, r24	; 26
 97e:	08 95       	ret
 980:	2a b3       	in	r18, 0x1a	; 26
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	02 c0       	rjmp	.+4      	; 0x98c <pin_init+0x3e>
 988:	88 0f       	add	r24, r24
 98a:	99 1f       	adc	r25, r25
 98c:	6a 95       	dec	r22
 98e:	e2 f7       	brpl	.-8      	; 0x988 <pin_init+0x3a>
 990:	80 95       	com	r24
 992:	82 23       	and	r24, r18
 994:	8a bb       	out	0x1a, r24	; 26
 996:	08 95       	ret
 998:	41 11       	cpse	r20, r1
 99a:	0b c0       	rjmp	.+22     	; 0x9b2 <pin_init+0x64>
 99c:	27 b3       	in	r18, 0x17	; 23
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <pin_init+0x5a>
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	6a 95       	dec	r22
 9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <pin_init+0x56>
 9ac:	82 2b       	or	r24, r18
 9ae:	87 bb       	out	0x17, r24	; 23
 9b0:	08 95       	ret
 9b2:	27 b3       	in	r18, 0x17	; 23
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <pin_init+0x70>
 9ba:	88 0f       	add	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	6a 95       	dec	r22
 9c0:	e2 f7       	brpl	.-8      	; 0x9ba <pin_init+0x6c>
 9c2:	80 95       	com	r24
 9c4:	82 23       	and	r24, r18
 9c6:	87 bb       	out	0x17, r24	; 23
 9c8:	08 95       	ret
 9ca:	41 11       	cpse	r20, r1
 9cc:	0b c0       	rjmp	.+22     	; 0x9e4 <pin_init+0x96>
 9ce:	24 b3       	in	r18, 0x14	; 20
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <pin_init+0x8c>
 9d6:	88 0f       	add	r24, r24
 9d8:	99 1f       	adc	r25, r25
 9da:	6a 95       	dec	r22
 9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <pin_init+0x88>
 9de:	82 2b       	or	r24, r18
 9e0:	84 bb       	out	0x14, r24	; 20
 9e2:	08 95       	ret
 9e4:	24 b3       	in	r18, 0x14	; 20
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <pin_init+0xa2>
 9ec:	88 0f       	add	r24, r24
 9ee:	99 1f       	adc	r25, r25
 9f0:	6a 95       	dec	r22
 9f2:	e2 f7       	brpl	.-8      	; 0x9ec <pin_init+0x9e>
 9f4:	80 95       	com	r24
 9f6:	82 23       	and	r24, r18
 9f8:	84 bb       	out	0x14, r24	; 20
 9fa:	08 95       	ret
 9fc:	41 11       	cpse	r20, r1
 9fe:	0b c0       	rjmp	.+22     	; 0xa16 <pin_init+0xc8>
 a00:	21 b3       	in	r18, 0x11	; 17
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <pin_init+0xbe>
 a08:	88 0f       	add	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	6a 95       	dec	r22
 a0e:	e2 f7       	brpl	.-8      	; 0xa08 <pin_init+0xba>
 a10:	82 2b       	or	r24, r18
 a12:	81 bb       	out	0x11, r24	; 17
 a14:	08 95       	ret
 a16:	21 b3       	in	r18, 0x11	; 17
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <pin_init+0xd4>
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	6a 95       	dec	r22
 a24:	e2 f7       	brpl	.-8      	; 0xa1e <pin_init+0xd0>
 a26:	80 95       	com	r24
 a28:	82 23       	and	r24, r18
 a2a:	81 bb       	out	0x11, r24	; 17
 a2c:	08 95       	ret

00000a2e <pin_write>:
 a2e:	82 34       	cpi	r24, 0x42	; 66
 a30:	19 f1       	breq	.+70     	; 0xa78 <pin_write+0x4a>
 a32:	18 f4       	brcc	.+6      	; 0xa3a <pin_write+0xc>
 a34:	81 34       	cpi	r24, 0x41	; 65
 a36:	39 f0       	breq	.+14     	; 0xa46 <pin_write+0x18>
 a38:	08 95       	ret
 a3a:	83 34       	cpi	r24, 0x43	; 67
 a3c:	b1 f1       	breq	.+108    	; 0xaaa <pin_write+0x7c>
 a3e:	84 34       	cpi	r24, 0x44	; 68
 a40:	09 f4       	brne	.+2      	; 0xa44 <pin_write+0x16>
 a42:	4c c0       	rjmp	.+152    	; 0xadc <pin_write+0xae>
 a44:	08 95       	ret
 a46:	41 30       	cpi	r20, 0x01	; 1
 a48:	59 f4       	brne	.+22     	; 0xa60 <pin_write+0x32>
 a4a:	2b b3       	in	r18, 0x1b	; 27
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <pin_write+0x28>
 a52:	88 0f       	add	r24, r24
 a54:	99 1f       	adc	r25, r25
 a56:	6a 95       	dec	r22
 a58:	e2 f7       	brpl	.-8      	; 0xa52 <pin_write+0x24>
 a5a:	82 2b       	or	r24, r18
 a5c:	8b bb       	out	0x1b, r24	; 27
 a5e:	08 95       	ret
 a60:	2b b3       	in	r18, 0x1b	; 27
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <pin_write+0x3e>
 a68:	88 0f       	add	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	6a 95       	dec	r22
 a6e:	e2 f7       	brpl	.-8      	; 0xa68 <pin_write+0x3a>
 a70:	80 95       	com	r24
 a72:	82 23       	and	r24, r18
 a74:	8b bb       	out	0x1b, r24	; 27
 a76:	08 95       	ret
 a78:	41 30       	cpi	r20, 0x01	; 1
 a7a:	59 f4       	brne	.+22     	; 0xa92 <pin_write+0x64>
 a7c:	28 b3       	in	r18, 0x18	; 24
 a7e:	81 e0       	ldi	r24, 0x01	; 1
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <pin_write+0x5a>
 a84:	88 0f       	add	r24, r24
 a86:	99 1f       	adc	r25, r25
 a88:	6a 95       	dec	r22
 a8a:	e2 f7       	brpl	.-8      	; 0xa84 <pin_write+0x56>
 a8c:	82 2b       	or	r24, r18
 a8e:	88 bb       	out	0x18, r24	; 24
 a90:	08 95       	ret
 a92:	28 b3       	in	r18, 0x18	; 24
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	02 c0       	rjmp	.+4      	; 0xa9e <pin_write+0x70>
 a9a:	88 0f       	add	r24, r24
 a9c:	99 1f       	adc	r25, r25
 a9e:	6a 95       	dec	r22
 aa0:	e2 f7       	brpl	.-8      	; 0xa9a <pin_write+0x6c>
 aa2:	80 95       	com	r24
 aa4:	82 23       	and	r24, r18
 aa6:	88 bb       	out	0x18, r24	; 24
 aa8:	08 95       	ret
 aaa:	41 30       	cpi	r20, 0x01	; 1
 aac:	59 f4       	brne	.+22     	; 0xac4 <pin_write+0x96>
 aae:	25 b3       	in	r18, 0x15	; 21
 ab0:	81 e0       	ldi	r24, 0x01	; 1
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <pin_write+0x8c>
 ab6:	88 0f       	add	r24, r24
 ab8:	99 1f       	adc	r25, r25
 aba:	6a 95       	dec	r22
 abc:	e2 f7       	brpl	.-8      	; 0xab6 <pin_write+0x88>
 abe:	82 2b       	or	r24, r18
 ac0:	85 bb       	out	0x15, r24	; 21
 ac2:	08 95       	ret
 ac4:	25 b3       	in	r18, 0x15	; 21
 ac6:	81 e0       	ldi	r24, 0x01	; 1
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <pin_write+0xa2>
 acc:	88 0f       	add	r24, r24
 ace:	99 1f       	adc	r25, r25
 ad0:	6a 95       	dec	r22
 ad2:	e2 f7       	brpl	.-8      	; 0xacc <pin_write+0x9e>
 ad4:	80 95       	com	r24
 ad6:	82 23       	and	r24, r18
 ad8:	85 bb       	out	0x15, r24	; 21
 ada:	08 95       	ret
 adc:	41 30       	cpi	r20, 0x01	; 1
 ade:	59 f4       	brne	.+22     	; 0xaf6 <pin_write+0xc8>
 ae0:	22 b3       	in	r18, 0x12	; 18
 ae2:	81 e0       	ldi	r24, 0x01	; 1
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <pin_write+0xbe>
 ae8:	88 0f       	add	r24, r24
 aea:	99 1f       	adc	r25, r25
 aec:	6a 95       	dec	r22
 aee:	e2 f7       	brpl	.-8      	; 0xae8 <pin_write+0xba>
 af0:	82 2b       	or	r24, r18
 af2:	82 bb       	out	0x12, r24	; 18
 af4:	08 95       	ret
 af6:	22 b3       	in	r18, 0x12	; 18
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	02 c0       	rjmp	.+4      	; 0xb02 <pin_write+0xd4>
 afe:	88 0f       	add	r24, r24
 b00:	99 1f       	adc	r25, r25
 b02:	6a 95       	dec	r22
 b04:	e2 f7       	brpl	.-8      	; 0xafe <pin_write+0xd0>
 b06:	80 95       	com	r24
 b08:	82 23       	and	r24, r18
 b0a:	82 bb       	out	0x12, r24	; 18
 b0c:	08 95       	ret

00000b0e <pin_read>:
 b0e:	82 34       	cpi	r24, 0x42	; 66
 b10:	e9 f0       	breq	.+58     	; 0xb4c <pin_read+0x3e>
 b12:	18 f4       	brcc	.+6      	; 0xb1a <pin_read+0xc>
 b14:	81 34       	cpi	r24, 0x41	; 65
 b16:	31 f0       	breq	.+12     	; 0xb24 <pin_read+0x16>
 b18:	55 c0       	rjmp	.+170    	; 0xbc4 <pin_read+0xb6>
 b1a:	83 34       	cpi	r24, 0x43	; 67
 b1c:	59 f1       	breq	.+86     	; 0xb74 <pin_read+0x66>
 b1e:	84 34       	cpi	r24, 0x44	; 68
 b20:	e9 f1       	breq	.+122    	; 0xb9c <pin_read+0x8e>
 b22:	50 c0       	rjmp	.+160    	; 0xbc4 <pin_read+0xb6>
 b24:	49 b3       	in	r20, 0x19	; 25
 b26:	81 e0       	ldi	r24, 0x01	; 1
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	9c 01       	movw	r18, r24
 b2c:	06 2e       	mov	r0, r22
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <pin_read+0x26>
 b30:	22 0f       	add	r18, r18
 b32:	33 1f       	adc	r19, r19
 b34:	0a 94       	dec	r0
 b36:	e2 f7       	brpl	.-8      	; 0xb30 <pin_read+0x22>
 b38:	84 2f       	mov	r24, r20
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	82 23       	and	r24, r18
 b3e:	93 23       	and	r25, r19
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <pin_read+0x38>
 b42:	95 95       	asr	r25
 b44:	87 95       	ror	r24
 b46:	6a 95       	dec	r22
 b48:	e2 f7       	brpl	.-8      	; 0xb42 <pin_read+0x34>
 b4a:	08 95       	ret
 b4c:	46 b3       	in	r20, 0x16	; 22
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	9c 01       	movw	r18, r24
 b54:	06 2e       	mov	r0, r22
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <pin_read+0x4e>
 b58:	22 0f       	add	r18, r18
 b5a:	33 1f       	adc	r19, r19
 b5c:	0a 94       	dec	r0
 b5e:	e2 f7       	brpl	.-8      	; 0xb58 <pin_read+0x4a>
 b60:	84 2f       	mov	r24, r20
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	82 23       	and	r24, r18
 b66:	93 23       	and	r25, r19
 b68:	02 c0       	rjmp	.+4      	; 0xb6e <pin_read+0x60>
 b6a:	95 95       	asr	r25
 b6c:	87 95       	ror	r24
 b6e:	6a 95       	dec	r22
 b70:	e2 f7       	brpl	.-8      	; 0xb6a <pin_read+0x5c>
 b72:	08 95       	ret
 b74:	43 b3       	in	r20, 0x13	; 19
 b76:	81 e0       	ldi	r24, 0x01	; 1
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	9c 01       	movw	r18, r24
 b7c:	06 2e       	mov	r0, r22
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <pin_read+0x76>
 b80:	22 0f       	add	r18, r18
 b82:	33 1f       	adc	r19, r19
 b84:	0a 94       	dec	r0
 b86:	e2 f7       	brpl	.-8      	; 0xb80 <pin_read+0x72>
 b88:	84 2f       	mov	r24, r20
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	82 23       	and	r24, r18
 b8e:	93 23       	and	r25, r19
 b90:	02 c0       	rjmp	.+4      	; 0xb96 <pin_read+0x88>
 b92:	95 95       	asr	r25
 b94:	87 95       	ror	r24
 b96:	6a 95       	dec	r22
 b98:	e2 f7       	brpl	.-8      	; 0xb92 <pin_read+0x84>
 b9a:	08 95       	ret
 b9c:	40 b3       	in	r20, 0x10	; 16
 b9e:	81 e0       	ldi	r24, 0x01	; 1
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	9c 01       	movw	r18, r24
 ba4:	06 2e       	mov	r0, r22
 ba6:	02 c0       	rjmp	.+4      	; 0xbac <pin_read+0x9e>
 ba8:	22 0f       	add	r18, r18
 baa:	33 1f       	adc	r19, r19
 bac:	0a 94       	dec	r0
 bae:	e2 f7       	brpl	.-8      	; 0xba8 <pin_read+0x9a>
 bb0:	84 2f       	mov	r24, r20
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	82 23       	and	r24, r18
 bb6:	93 23       	and	r25, r19
 bb8:	02 c0       	rjmp	.+4      	; 0xbbe <pin_read+0xb0>
 bba:	95 95       	asr	r25
 bbc:	87 95       	ror	r24
 bbe:	6a 95       	dec	r22
 bc0:	e2 f7       	brpl	.-8      	; 0xbba <pin_read+0xac>
 bc2:	08 95       	ret
 bc4:	80 e0       	ldi	r24, 0x00	; 0
 bc6:	08 95       	ret

00000bc8 <port_nibble_init>:
 bc8:	82 34       	cpi	r24, 0x42	; 66
 bca:	01 f1       	breq	.+64     	; 0xc0c <port_nibble_init+0x44>
 bcc:	18 f4       	brcc	.+6      	; 0xbd4 <port_nibble_init+0xc>
 bce:	81 34       	cpi	r24, 0x41	; 65
 bd0:	39 f0       	breq	.+14     	; 0xbe0 <port_nibble_init+0x18>
 bd2:	08 95       	ret
 bd4:	83 34       	cpi	r24, 0x43	; 67
 bd6:	81 f1       	breq	.+96     	; 0xc38 <port_nibble_init+0x70>
 bd8:	84 34       	cpi	r24, 0x44	; 68
 bda:	09 f4       	brne	.+2      	; 0xbde <port_nibble_init+0x16>
 bdc:	43 c0       	rjmp	.+134    	; 0xc64 <port_nibble_init+0x9c>
 bde:	08 95       	ret
 be0:	61 11       	cpse	r22, r1
 be2:	0a c0       	rjmp	.+20     	; 0xbf8 <port_nibble_init+0x30>
 be4:	41 11       	cpse	r20, r1
 be6:	04 c0       	rjmp	.+8      	; 0xbf0 <port_nibble_init+0x28>
 be8:	8a b3       	in	r24, 0x1a	; 26
 bea:	8f 60       	ori	r24, 0x0F	; 15
 bec:	8a bb       	out	0x1a, r24	; 26
 bee:	08 95       	ret
 bf0:	8a b3       	in	r24, 0x1a	; 26
 bf2:	80 7f       	andi	r24, 0xF0	; 240
 bf4:	8a bb       	out	0x1a, r24	; 26
 bf6:	08 95       	ret
 bf8:	41 11       	cpse	r20, r1
 bfa:	04 c0       	rjmp	.+8      	; 0xc04 <port_nibble_init+0x3c>
 bfc:	8a b3       	in	r24, 0x1a	; 26
 bfe:	80 6f       	ori	r24, 0xF0	; 240
 c00:	8a bb       	out	0x1a, r24	; 26
 c02:	08 95       	ret
 c04:	8a b3       	in	r24, 0x1a	; 26
 c06:	8f 70       	andi	r24, 0x0F	; 15
 c08:	8a bb       	out	0x1a, r24	; 26
 c0a:	08 95       	ret
 c0c:	61 11       	cpse	r22, r1
 c0e:	0a c0       	rjmp	.+20     	; 0xc24 <port_nibble_init+0x5c>
 c10:	41 11       	cpse	r20, r1
 c12:	04 c0       	rjmp	.+8      	; 0xc1c <port_nibble_init+0x54>
 c14:	87 b3       	in	r24, 0x17	; 23
 c16:	8f 60       	ori	r24, 0x0F	; 15
 c18:	87 bb       	out	0x17, r24	; 23
 c1a:	08 95       	ret
 c1c:	87 b3       	in	r24, 0x17	; 23
 c1e:	80 7f       	andi	r24, 0xF0	; 240
 c20:	87 bb       	out	0x17, r24	; 23
 c22:	08 95       	ret
 c24:	41 11       	cpse	r20, r1
 c26:	04 c0       	rjmp	.+8      	; 0xc30 <port_nibble_init+0x68>
 c28:	87 b3       	in	r24, 0x17	; 23
 c2a:	80 6f       	ori	r24, 0xF0	; 240
 c2c:	87 bb       	out	0x17, r24	; 23
 c2e:	08 95       	ret
 c30:	87 b3       	in	r24, 0x17	; 23
 c32:	8f 70       	andi	r24, 0x0F	; 15
 c34:	87 bb       	out	0x17, r24	; 23
 c36:	08 95       	ret
 c38:	61 11       	cpse	r22, r1
 c3a:	0a c0       	rjmp	.+20     	; 0xc50 <port_nibble_init+0x88>
 c3c:	41 11       	cpse	r20, r1
 c3e:	04 c0       	rjmp	.+8      	; 0xc48 <port_nibble_init+0x80>
 c40:	84 b3       	in	r24, 0x14	; 20
 c42:	8f 60       	ori	r24, 0x0F	; 15
 c44:	84 bb       	out	0x14, r24	; 20
 c46:	08 95       	ret
 c48:	84 b3       	in	r24, 0x14	; 20
 c4a:	80 7f       	andi	r24, 0xF0	; 240
 c4c:	84 bb       	out	0x14, r24	; 20
 c4e:	08 95       	ret
 c50:	41 11       	cpse	r20, r1
 c52:	04 c0       	rjmp	.+8      	; 0xc5c <port_nibble_init+0x94>
 c54:	84 b3       	in	r24, 0x14	; 20
 c56:	80 6f       	ori	r24, 0xF0	; 240
 c58:	84 bb       	out	0x14, r24	; 20
 c5a:	08 95       	ret
 c5c:	84 b3       	in	r24, 0x14	; 20
 c5e:	8f 70       	andi	r24, 0x0F	; 15
 c60:	84 bb       	out	0x14, r24	; 20
 c62:	08 95       	ret
 c64:	61 11       	cpse	r22, r1
 c66:	0a c0       	rjmp	.+20     	; 0xc7c <port_nibble_init+0xb4>
 c68:	41 11       	cpse	r20, r1
 c6a:	04 c0       	rjmp	.+8      	; 0xc74 <port_nibble_init+0xac>
 c6c:	81 b3       	in	r24, 0x11	; 17
 c6e:	8f 60       	ori	r24, 0x0F	; 15
 c70:	81 bb       	out	0x11, r24	; 17
 c72:	08 95       	ret
 c74:	81 b3       	in	r24, 0x11	; 17
 c76:	80 7f       	andi	r24, 0xF0	; 240
 c78:	81 bb       	out	0x11, r24	; 17
 c7a:	08 95       	ret
 c7c:	41 11       	cpse	r20, r1
 c7e:	04 c0       	rjmp	.+8      	; 0xc88 <port_nibble_init+0xc0>
 c80:	81 b3       	in	r24, 0x11	; 17
 c82:	80 6f       	ori	r24, 0xF0	; 240
 c84:	81 bb       	out	0x11, r24	; 17
 c86:	08 95       	ret
 c88:	81 b3       	in	r24, 0x11	; 17
 c8a:	8f 70       	andi	r24, 0x0F	; 15
 c8c:	81 bb       	out	0x11, r24	; 17
 c8e:	08 95       	ret

00000c90 <port_nibble_write>:
 c90:	82 34       	cpi	r24, 0x42	; 66
 c92:	d9 f0       	breq	.+54     	; 0xcca <port_nibble_write+0x3a>
 c94:	18 f4       	brcc	.+6      	; 0xc9c <port_nibble_write+0xc>
 c96:	81 34       	cpi	r24, 0x41	; 65
 c98:	31 f0       	breq	.+12     	; 0xca6 <port_nibble_write+0x16>
 c9a:	08 95       	ret
 c9c:	83 34       	cpi	r24, 0x43	; 67
 c9e:	39 f1       	breq	.+78     	; 0xcee <port_nibble_write+0x5e>
 ca0:	84 34       	cpi	r24, 0x44	; 68
 ca2:	b9 f1       	breq	.+110    	; 0xd12 <port_nibble_write+0x82>
 ca4:	08 95       	ret
 ca6:	61 11       	cpse	r22, r1
 ca8:	07 c0       	rjmp	.+14     	; 0xcb8 <port_nibble_write+0x28>
 caa:	8b b3       	in	r24, 0x1b	; 27
 cac:	80 7f       	andi	r24, 0xF0	; 240
 cae:	8b bb       	out	0x1b, r24	; 27
 cb0:	8b b3       	in	r24, 0x1b	; 27
 cb2:	48 2b       	or	r20, r24
 cb4:	4b bb       	out	0x1b, r20	; 27
 cb6:	08 95       	ret
 cb8:	42 95       	swap	r20
 cba:	40 7f       	andi	r20, 0xF0	; 240
 cbc:	8b b3       	in	r24, 0x1b	; 27
 cbe:	8f 70       	andi	r24, 0x0F	; 15
 cc0:	8b bb       	out	0x1b, r24	; 27
 cc2:	8b b3       	in	r24, 0x1b	; 27
 cc4:	48 2b       	or	r20, r24
 cc6:	4b bb       	out	0x1b, r20	; 27
 cc8:	08 95       	ret
 cca:	61 11       	cpse	r22, r1
 ccc:	07 c0       	rjmp	.+14     	; 0xcdc <port_nibble_write+0x4c>
 cce:	88 b3       	in	r24, 0x18	; 24
 cd0:	80 7f       	andi	r24, 0xF0	; 240
 cd2:	88 bb       	out	0x18, r24	; 24
 cd4:	88 b3       	in	r24, 0x18	; 24
 cd6:	48 2b       	or	r20, r24
 cd8:	48 bb       	out	0x18, r20	; 24
 cda:	08 95       	ret
 cdc:	42 95       	swap	r20
 cde:	40 7f       	andi	r20, 0xF0	; 240
 ce0:	88 b3       	in	r24, 0x18	; 24
 ce2:	8f 70       	andi	r24, 0x0F	; 15
 ce4:	88 bb       	out	0x18, r24	; 24
 ce6:	88 b3       	in	r24, 0x18	; 24
 ce8:	48 2b       	or	r20, r24
 cea:	48 bb       	out	0x18, r20	; 24
 cec:	08 95       	ret
 cee:	61 11       	cpse	r22, r1
 cf0:	07 c0       	rjmp	.+14     	; 0xd00 <port_nibble_write+0x70>
 cf2:	85 b3       	in	r24, 0x15	; 21
 cf4:	80 7f       	andi	r24, 0xF0	; 240
 cf6:	85 bb       	out	0x15, r24	; 21
 cf8:	85 b3       	in	r24, 0x15	; 21
 cfa:	48 2b       	or	r20, r24
 cfc:	45 bb       	out	0x15, r20	; 21
 cfe:	08 95       	ret
 d00:	42 95       	swap	r20
 d02:	40 7f       	andi	r20, 0xF0	; 240
 d04:	85 b3       	in	r24, 0x15	; 21
 d06:	8f 70       	andi	r24, 0x0F	; 15
 d08:	85 bb       	out	0x15, r24	; 21
 d0a:	85 b3       	in	r24, 0x15	; 21
 d0c:	48 2b       	or	r20, r24
 d0e:	45 bb       	out	0x15, r20	; 21
 d10:	08 95       	ret
 d12:	61 11       	cpse	r22, r1
 d14:	07 c0       	rjmp	.+14     	; 0xd24 <port_nibble_write+0x94>
 d16:	82 b3       	in	r24, 0x12	; 18
 d18:	80 7f       	andi	r24, 0xF0	; 240
 d1a:	82 bb       	out	0x12, r24	; 18
 d1c:	82 b3       	in	r24, 0x12	; 18
 d1e:	48 2b       	or	r20, r24
 d20:	42 bb       	out	0x12, r20	; 18
 d22:	08 95       	ret
 d24:	42 95       	swap	r20
 d26:	40 7f       	andi	r20, 0xF0	; 240
 d28:	82 b3       	in	r24, 0x12	; 18
 d2a:	8f 70       	andi	r24, 0x0F	; 15
 d2c:	82 bb       	out	0x12, r24	; 18
 d2e:	82 b3       	in	r24, 0x12	; 18
 d30:	48 2b       	or	r20, r24
 d32:	42 bb       	out	0x12, r20	; 18
 d34:	08 95       	ret

00000d36 <internal_pullup_enable>:
}



void internal_pullup_enable(uint8 port, uint8 pin){
	switch(port){
 d36:	82 34       	cpi	r24, 0x42	; 66
 d38:	a1 f0       	breq	.+40     	; 0xd62 <internal_pullup_enable+0x2c>
 d3a:	18 f4       	brcc	.+6      	; 0xd42 <internal_pullup_enable+0xc>
 d3c:	81 34       	cpi	r24, 0x41	; 65
 d3e:	31 f0       	breq	.+12     	; 0xd4c <internal_pullup_enable+0x16>
 d40:	08 95       	ret
 d42:	83 34       	cpi	r24, 0x43	; 67
 d44:	c9 f0       	breq	.+50     	; 0xd78 <internal_pullup_enable+0x42>
 d46:	84 34       	cpi	r24, 0x44	; 68
 d48:	11 f1       	breq	.+68     	; 0xd8e <internal_pullup_enable+0x58>
 d4a:	08 95       	ret
		case PORT_A:
			SET_BIT(PORTA_REG,pin);
 d4c:	2b b3       	in	r18, 0x1b	; 27
 d4e:	81 e0       	ldi	r24, 0x01	; 1
 d50:	90 e0       	ldi	r25, 0x00	; 0
 d52:	02 c0       	rjmp	.+4      	; 0xd58 <internal_pullup_enable+0x22>
 d54:	88 0f       	add	r24, r24
 d56:	99 1f       	adc	r25, r25
 d58:	6a 95       	dec	r22
 d5a:	e2 f7       	brpl	.-8      	; 0xd54 <internal_pullup_enable+0x1e>
 d5c:	82 2b       	or	r24, r18
 d5e:	8b bb       	out	0x1b, r24	; 27
			break;
 d60:	08 95       	ret
		case PORT_B:
			SET_BIT(PORTB_REG,pin);
 d62:	28 b3       	in	r18, 0x18	; 24
 d64:	81 e0       	ldi	r24, 0x01	; 1
 d66:	90 e0       	ldi	r25, 0x00	; 0
 d68:	02 c0       	rjmp	.+4      	; 0xd6e <internal_pullup_enable+0x38>
 d6a:	88 0f       	add	r24, r24
 d6c:	99 1f       	adc	r25, r25
 d6e:	6a 95       	dec	r22
 d70:	e2 f7       	brpl	.-8      	; 0xd6a <internal_pullup_enable+0x34>
 d72:	82 2b       	or	r24, r18
 d74:	88 bb       	out	0x18, r24	; 24
			break;
 d76:	08 95       	ret
		case PORT_C:
			SET_BIT(PORTC_REG,pin);
 d78:	25 b3       	in	r18, 0x15	; 21
 d7a:	81 e0       	ldi	r24, 0x01	; 1
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	02 c0       	rjmp	.+4      	; 0xd84 <internal_pullup_enable+0x4e>
 d80:	88 0f       	add	r24, r24
 d82:	99 1f       	adc	r25, r25
 d84:	6a 95       	dec	r22
 d86:	e2 f7       	brpl	.-8      	; 0xd80 <internal_pullup_enable+0x4a>
 d88:	82 2b       	or	r24, r18
 d8a:	85 bb       	out	0x15, r24	; 21
			break;
 d8c:	08 95       	ret
		case PORT_D:
			SET_BIT(PORTD_REG,pin);
 d8e:	22 b3       	in	r18, 0x12	; 18
 d90:	81 e0       	ldi	r24, 0x01	; 1
 d92:	90 e0       	ldi	r25, 0x00	; 0
 d94:	02 c0       	rjmp	.+4      	; 0xd9a <internal_pullup_enable+0x64>
 d96:	88 0f       	add	r24, r24
 d98:	99 1f       	adc	r25, r25
 d9a:	6a 95       	dec	r22
 d9c:	e2 f7       	brpl	.-8      	; 0xd96 <internal_pullup_enable+0x60>
 d9e:	82 2b       	or	r24, r18
 da0:	82 bb       	out	0x12, r24	; 18
 da2:	08 95       	ret

00000da4 <timer0_init>:
}

void timer0_disable(){
	CLR_BIT(SREG_REG,I_BIT);
	//Enable Output Compare Match Interrupt
	CLR_BIT(TIMSK_REG,OCIE0_BIT);
 da4:	83 b7       	in	r24, 0x33	; 51
 da6:	81 60       	ori	r24, 0x01	; 1
 da8:	83 bf       	out	0x33, r24	; 51
 daa:	83 b7       	in	r24, 0x33	; 51
 dac:	8d 7f       	andi	r24, 0xFD	; 253
 dae:	83 bf       	out	0x33, r24	; 51
 db0:	83 b7       	in	r24, 0x33	; 51
 db2:	84 60       	ori	r24, 0x04	; 4
 db4:	83 bf       	out	0x33, r24	; 51
 db6:	83 b7       	in	r24, 0x33	; 51
 db8:	8f 7b       	andi	r24, 0xBF	; 191
 dba:	83 bf       	out	0x33, r24	; 51
 dbc:	83 b7       	in	r24, 0x33	; 51
 dbe:	88 60       	ori	r24, 0x08	; 8
 dc0:	83 bf       	out	0x33, r24	; 51
 dc2:	83 b7       	in	r24, 0x33	; 51
 dc4:	8f 7e       	andi	r24, 0xEF	; 239
 dc6:	83 bf       	out	0x33, r24	; 51
 dc8:	83 b7       	in	r24, 0x33	; 51
 dca:	8f 7d       	andi	r24, 0xDF	; 223
 dcc:	83 bf       	out	0x33, r24	; 51
 dce:	8c e3       	ldi	r24, 0x3C	; 60
 dd0:	8c bf       	out	0x3c, r24	; 60
 dd2:	08 95       	ret

00000dd4 <timer0_enable>:
 dd4:	8f b7       	in	r24, 0x3f	; 63
 dd6:	80 68       	ori	r24, 0x80	; 128
 dd8:	8f bf       	out	0x3f, r24	; 63
 dda:	89 b7       	in	r24, 0x39	; 57
 ddc:	82 60       	ori	r24, 0x02	; 2
 dde:	89 bf       	out	0x39, r24	; 57
 de0:	08 95       	ret

00000de2 <timer0_set_callback>:
}

void timer0_set_callback(void (*callback) (void)){
	timer0_callback = callback;
 de2:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <timer0_callback+0x1>
 de6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <timer0_callback>
 dea:	08 95       	ret

00000dec <__vector_10>:
}

ISR(TIMER0_COMP_vect){
 dec:	1f 92       	push	r1
 dee:	0f 92       	push	r0
 df0:	0f b6       	in	r0, 0x3f	; 63
 df2:	0f 92       	push	r0
 df4:	11 24       	eor	r1, r1
 df6:	2f 93       	push	r18
 df8:	3f 93       	push	r19
 dfa:	4f 93       	push	r20
 dfc:	5f 93       	push	r21
 dfe:	6f 93       	push	r22
 e00:	7f 93       	push	r23
 e02:	8f 93       	push	r24
 e04:	9f 93       	push	r25
 e06:	af 93       	push	r26
 e08:	bf 93       	push	r27
 e0a:	ef 93       	push	r30
 e0c:	ff 93       	push	r31
	timer0_callback();
 e0e:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <timer0_callback>
 e12:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <timer0_callback+0x1>
 e16:	09 95       	icall
 e18:	ff 91       	pop	r31
 e1a:	ef 91       	pop	r30
 e1c:	bf 91       	pop	r27
 e1e:	af 91       	pop	r26
 e20:	9f 91       	pop	r25
 e22:	8f 91       	pop	r24
 e24:	7f 91       	pop	r23
 e26:	6f 91       	pop	r22
 e28:	5f 91       	pop	r21
 e2a:	4f 91       	pop	r20
 e2c:	3f 91       	pop	r19
 e2e:	2f 91       	pop	r18
 e30:	0f 90       	pop	r0
 e32:	0f be       	out	0x3f, r0	; 63
 e34:	0f 90       	pop	r0
 e36:	1f 90       	pop	r1
 e38:	18 95       	reti

00000e3a <timer2_init>:
}

void timer2_disable(){
	CLR_BIT(SREG_REG,I_BIT);
	//Enable overflow Interrupt
	CLR_BIT(TIMSK_REG,TOIE2_BIT);
 e3a:	82 b5       	in	r24, 0x22	; 34
 e3c:	88 60       	ori	r24, 0x08	; 8
 e3e:	82 bd       	out	0x22, r24	; 34
 e40:	85 b5       	in	r24, 0x25	; 37
 e42:	81 60       	ori	r24, 0x01	; 1
 e44:	85 bd       	out	0x25, r24	; 37
 e46:	85 b5       	in	r24, 0x25	; 37
 e48:	8d 7f       	andi	r24, 0xFD	; 253
 e4a:	85 bd       	out	0x25, r24	; 37
 e4c:	85 b5       	in	r24, 0x25	; 37
 e4e:	84 60       	ori	r24, 0x04	; 4
 e50:	85 bd       	out	0x25, r24	; 37
 e52:	85 b5       	in	r24, 0x25	; 37
 e54:	8f 7b       	andi	r24, 0xBF	; 191
 e56:	85 bd       	out	0x25, r24	; 37
 e58:	85 b5       	in	r24, 0x25	; 37
 e5a:	87 7f       	andi	r24, 0xF7	; 247
 e5c:	85 bd       	out	0x25, r24	; 37
 e5e:	85 b5       	in	r24, 0x25	; 37
 e60:	8f 7e       	andi	r24, 0xEF	; 239
 e62:	85 bd       	out	0x25, r24	; 37
 e64:	85 b5       	in	r24, 0x25	; 37
 e66:	8f 7d       	andi	r24, 0xDF	; 223
 e68:	85 bd       	out	0x25, r24	; 37
 e6a:	08 95       	ret

00000e6c <timer2_enable>:
 e6c:	8f b7       	in	r24, 0x3f	; 63
 e6e:	80 68       	ori	r24, 0x80	; 128
 e70:	8f bf       	out	0x3f, r24	; 63
 e72:	89 b7       	in	r24, 0x39	; 57
 e74:	80 64       	ori	r24, 0x40	; 64
 e76:	89 bf       	out	0x39, r24	; 57
 e78:	08 95       	ret

00000e7a <timer2_set_callback>:
}

void timer2_set_callback(void (*callback) (void)){
	timer2_callback = callback;
 e7a:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <timer2_callback+0x1>
 e7e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <timer2_callback>
 e82:	08 95       	ret

00000e84 <__vector_5>:
}

ISR(TIMER2_OVF_vect){
 e84:	1f 92       	push	r1
 e86:	0f 92       	push	r0
 e88:	0f b6       	in	r0, 0x3f	; 63
 e8a:	0f 92       	push	r0
 e8c:	11 24       	eor	r1, r1
 e8e:	2f 93       	push	r18
 e90:	3f 93       	push	r19
 e92:	4f 93       	push	r20
 e94:	5f 93       	push	r21
 e96:	6f 93       	push	r22
 e98:	7f 93       	push	r23
 e9a:	8f 93       	push	r24
 e9c:	9f 93       	push	r25
 e9e:	af 93       	push	r26
 ea0:	bf 93       	push	r27
 ea2:	ef 93       	push	r30
 ea4:	ff 93       	push	r31
	timer2_callback();
 ea6:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <timer2_callback>
 eaa:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <timer2_callback+0x1>
 eae:	09 95       	icall
 eb0:	ff 91       	pop	r31
 eb2:	ef 91       	pop	r30
 eb4:	bf 91       	pop	r27
 eb6:	af 91       	pop	r26
 eb8:	9f 91       	pop	r25
 eba:	8f 91       	pop	r24
 ebc:	7f 91       	pop	r23
 ebe:	6f 91       	pop	r22
 ec0:	5f 91       	pop	r21
 ec2:	4f 91       	pop	r20
 ec4:	3f 91       	pop	r19
 ec6:	2f 91       	pop	r18
 ec8:	0f 90       	pop	r0
 eca:	0f be       	out	0x3f, r0	; 63
 ecc:	0f 90       	pop	r0
 ece:	1f 90       	pop	r1
 ed0:	18 95       	reti

00000ed2 <_exit>:
 ed2:	f8 94       	cli

00000ed4 <__stop_program>:
 ed4:	ff cf       	rjmp	.-2      	; 0xed4 <__stop_program>
